@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix : <http://josd.github.io/eye/reasoning/cs#>.

# forward rules

# 1 ===== ===== ===== =====
# N3
{
    :input1 :measurement10 ?M1.
    :input2 :measurement2 true.
    :disturbance1 :measurement3 ?D1.
    (?M1 19.6) math:product ?C1.        # proportial part
    (10 ?C2) math:exponentiation ?D1.    # compensation part
    (?C1 ?C2) math:difference ?C.        # simple feedforward control
} => {
    :actuator1 :control1 ?C.
}.

# N3X
{
    :input1 :measurement10 ?M1.
    :input2 :measurement2 true.
    :disturbance1 :measurement3 ?D1.
} => {
    :actuator1 :control1 ?M1 * 19.6 - math:log(10, ?D1).
}.


# 2 ===== ===== ===== =====
# N3
{ 
    :input3 :measurement3 ?M3.
    :state3 :observation3 ?P3.
    :output2 :measurement4 ?M4.
    :output2 :target2 ?T2.
    (?T2 ?M4) math:difference ?E.        # error
    (?P3 ?M4) math:difference ?D.        # differential error
    (5.8 ?E) math:product ?C1.        # proportial part
    (7.3 ?E) math:quotient ?N.        # nonlinear factor
    (?N ?D) math:product ?C2.        # nonlinear differential part
    (?C1 ?C2) math:sum ?C.            # PND feedback control
} => {
    :actuator2 :control1 ?C.
}.

# N3X
{ 
    :input3 :measurement3 ?M3.
    :state3 :observation3 ?P3.
    :output2 :measurement4 ?M4.
    :output2 :target2 ?T2.
    ?T2 - ?M4 = ?E.      # error
} => {
    :actuator2 :control1  ?E * 5.8 + (?P3 - ?M4) * 7.3 / ?E .
}.

# backward rules

# 3 ===== ===== ===== =====
# N3
{
    ?I :measurement10 ?M.
} <= {
    ?I :measurement1 (?M1 ?M2).
    ?M1 math:lessThan ?M2.
    (?M2 ?M1) math:difference ?M3.
    (?M3 0.5) math:exponentiation ?M.
}.

# N3X
{
    ?I :measurement10 ?M.
} <= {
    ?I :measurement1 (?M1 ?M2).
    ?M1 math:lessThan ?M2.
    math:exponentiation(?M2 - ?M1, 0.5) = ?M.
}.


# 4 ===== ===== ===== =====
# N3
{
    ?I :measurement10 ?M1.
} <= {
    ?I :measurement1 (?M1 ?M2).
    ?M1 math:notLessThan ?M2.
}.

# N3X
# nothing to do